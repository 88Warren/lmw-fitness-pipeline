apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-test-deploy-pipeline
  namespace: lmw-fitness
spec:
  description: |
    This pipeline clones a git repo, runs tests and linting, builds an image with Kaniko,
    scans for vulnerabilities, and deploys using Helm charts
  params:
    - name: GITHUB_CLONE_URL
      type: string
      description: URL of the GitHub repository to clone
    - name: GITHUB_HELM_URL
      type: string
      description: URL of the GitHub Helm chart repository to clone
    - name: IMAGE_REPO
      type: string
      description: Docker image repository
    - name: APPLICATION_TYPE
      type: string
      description: Type of application (frontend or backend)
    - name: DOCKERFILE
      type: string
      description: Path to the Dockerfile
    - name: CONTEXT
      type: string
      description: Path to the build context
    - name: BUILDER_IMAGE
      type: string
      description: Name of the Kaniko builder image
    - name: TRIVY_SEVERITY
      type: string
      description: Comma-separated list of severities to scan for (e.g. "CRITICAL,HIGH")
    - name: HELM_CHART_PATH
      type: string
      description: Path to the Helm chart (frontend or backend)
    - name: PIPELINE_SEQUENCE_ID
      type: string
      description: Pipeline sequence ID for image tagging
  workspaces:
    - name: git-credentials
    - name: helm-chart
    - name: source
    - name: docker-config
  tasks:
    - name: git-clone
      taskRef:
        name: git-clone
        kind: Task
      params:
        - name: GITHUB_CLONE_URL
          value: $(params.GITHUB_CLONE_URL)
        - name: deleteExisting
          value: "true"
      workspaces:
        - name: git-credentials
          workspace: git-credentials
        - name: source
          workspace: source

    - name: debug-repo-var
      runAfter: ["git-clone"]
      taskRef:
        name: debug-repo-var
        kind: Task
      params:
        - name: IMAGE_REPO
          value: $(params.IMAGE_REPO)
        - name: PIPELINE_SEQUENCE_ID
          value: $(params.PIPELINE_SEQUENCE_ID)

    - name: frontend-lint
      runAfter: ["git-clone"]
      when:
        - input: "$(params.APPLICATION_TYPE)"
          operator: in
          values: ["frontend"]
      taskRef:
        name: frontend-lint
        kind: Task
      workspaces:
        - name: source
          workspace: source

    - name: frontend-unit-tests
      runAfter: ["frontend-lint"]
      when:
        - input: "$(params.APPLICATION_TYPE)"
          operator: in
          values: ["frontend"]
      taskRef:
        name: frontend-unit-tests
        kind: Task
      workspaces:
        - name: source
          workspace: source

    - name: npm-audit
      runAfter: ["frontend-unit-tests"]
      when:
        - input: "$(params.APPLICATION_TYPE)"
          operator: in
          values: ["frontend"]
      taskRef:
        name: npm-audit
        kind: Task
      workspaces:
        - name: source
          workspace: source

    - name: backend-lint
      runAfter: ["git-clone"]
      when:
        - input: "$(params.APPLICATION_TYPE)"
          operator: in
          values: ["backend"]
      taskRef:
        name: backend-lint
        kind: Task
      workspaces:
        - name: source
          workspace: source

    - name: database-background
      runAfter: ["git-clone"]
      when:
        - input: "$(params.APPLICATION_TYPE)"
          operator: in
          values: ["backend"]
      taskRef:
        name: database-background
        kind: Task

    - name: backend-tests
      runAfter: ["backend-lint", "database-background"]
      when:
        - input: "$(params.APPLICATION_TYPE)"
          operator: in
          values: ["backend"]
      taskRef:
        name: backend-tests
        kind: Task
      workspaces:
        - name: source
          workspace: source

    - name: helm-chart-clone
      taskRef:
        name: helm-chart-clone
        kind: Task
      params:
        - name: GITHUB_HELM_URL
          value: $(params.GITHUB_HELM_URL)
      workspaces:
        - name: helm-chart
          workspace: helm-chart
        - name: git-credentials
          workspace: git-credentials

    - name: kaniko-docker-build
      runAfter: ["npm-audit", "backend-tests"]
      taskRef:
        name: kaniko-docker-build
        kind: Task
      workspaces:
        - name: source
          workspace: source
        - name: docker-config
          workspace: docker-config
      params:
        - name: IMAGE_REPO
          value: $(params.IMAGE_REPO)
        - name: PIPELINE_SEQUENCE_ID
          value: $(params.PIPELINE_SEQUENCE_ID)
        - name: DOCKERFILE
          value: $(params.DOCKERFILE)
        - name: CONTEXT
          value: $(params.CONTEXT)
        - name: BUILDER_IMAGE
          value: $(params.BUILDER_IMAGE)

    - name: trivy-scan
      runAfter: ["kaniko-docker-build"]
      when:
        - input: "$(params.APPLICATION_TYPE)"
          operator: in
          values: ["backend"]
      taskRef:
        name: trivy-scan
        kind: Task
      params:
        - name: IMAGE
          value: $(tasks.kaniko-docker-build.results.IMAGE_URL)
        - name: TRIVY_SEVERITY
          value: $(params.TRIVY_SEVERITY)

    - name: helm-deploy
      runAfter: ["trivy-scan", "kaniko-docker-build"]
      taskRef:
        name: helm-deploy
        kind: Task
      params:
        - name: HELM_CHART_PATH
          value: $(params.HELM_CHART_PATH)
        - name: IMAGE_REPO
          value: $(params.IMAGE_REPO)
        - name: PIPELINE_SEQUENCE_ID
          value: $(params.PIPELINE_SEQUENCE_ID)
      workspaces:
        - name: helm-chart
          workspace: helm-chart
